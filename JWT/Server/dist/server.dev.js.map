{"version":3,"sources":["server.js"],"names":["express","require","mongoose","cors","User","config","app","use","json","PORT","get","req","res","send","post","create","name","body","email","password","user","status","error","findOne","connect","listen","console","log"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,oBAAD,CAApB;;AACAA,OAAO,CAAC,QAAD,CAAP,CAAkBI,MAAlB;;AAIA,IAAMC,GAAG,GAAGN,OAAO,EAAnB,C,CACA;;AACAM,GAAG,CAACC,GAAJ,CAAQP,OAAO,CAACQ,IAAR,EAAR;AACAF,GAAG,CAACC,GAAJ,CAAQJ,IAAI,EAAZ,E,CACA;;AACA,IAAMM,IAAI,GAAG,IAAb,C,CACA;;AACAH,GAAG,CAACI,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAKC,GAAL,EAAW;AAChBA,EAAAA,GAAG,CAACC,IAAJ,CAAS,mBAAT;AACP,CAFD;AAGAP,GAAG,CAACQ,IAAJ,CAAS,eAAT,EAA0B,iBAAOH,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAECR,IAAI,CAACW,MAAL,CAAY;AAC3BC,YAAAA,IAAI,EAAEL,GAAG,CAACM,IAAJ,CAASD,IADY;AAE3BE,YAAAA,KAAK,EAACP,GAAG,CAACM,IAAJ,CAASC,KAFY;AAG3BC,YAAAA,QAAQ,EAACR,GAAG,CAACM,IAAJ,CAASE;AAHS,WAAZ,CAFD;;AAAA;AAEZC,UAAAA,IAFY;AAOlBR,UAAAA,GAAG,CAACJ,IAAJ,CAAS;AAACa,YAAAA,MAAM,EAAE;AAAT,WAAT;AAPkB;AAAA;;AAAA;AAAA;AAAA;AASlBT,UAAAA,GAAG,CAACJ,IAAJ,CAAS;AAACa,YAAAA,MAAM,EAAE,OAAT;AAAkBC,YAAAA,KAAK,EAAE;AAAzB,WAAT;;AATkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;AAcAhB,GAAG,CAACQ,IAAJ,CAAS,YAAT,EAAuB,kBAAOH,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CACGR,IAAI,CAACmB,OAAL,CAAa;AAC5BL,YAAAA,KAAK,EAACP,GAAG,CAACM,IAAJ,CAASC,KADa;AAE5BC,YAAAA,QAAQ,EAAER,GAAG,CAACM,IAAJ,CAASE;AAFS,WAAb,CADH;;AAAA;AACVC,UAAAA,IADU;;AAAA,eAKbA,IALa;AAAA;AAAA;AAAA;;AAAA,4CAMRR,GAAG,CAACJ,IAAJ,CAAS;AAACa,YAAAA,MAAM,EAAE,IAAT;AAAeD,YAAAA,IAAI,EAAE;AAArB,WAAT,CANQ;;AAAA;AAAA,4CASRR,GAAG,CAACJ,IAAJ,CAAS;AAACa,YAAAA,MAAM,EAAE,OAAT;AAAkBD,YAAAA,IAAI,EAAE;AAAxB,WAAT,CATQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;AAeAlB,QAAQ,CAACsB,OAAT,CAAiB,gCAAjB;AACAlB,GAAG,CAACmB,MAAJ,CAAWhB,IAAX,EAAiB,YAAI;AACjBiB,EAAAA,OAAO,CAACC,GAAR,CAAY,4BAA2BlB,IAAvC;AACH,CAFD","sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose')\r\nconst cors = require('cors')\r\nconst User = require('./Models/userModel')\r\nrequire('dotenv').config()\r\n\r\n\r\n\r\nconst app = express();\r\n//Middlewares\r\napp.use(express.json())\r\napp.use(cors())\r\n//PORT\r\nconst PORT = 8000;\r\n//Routes\r\napp.get('/', (req,res)=>{\r\n        res.send('Hello from server')\r\n})\r\napp.post('/api/register', async (req, res)=>{\r\n    try {\r\n        const user = await User.create({\r\n            name: req.body.name,\r\n            email:req.body.email,\r\n            password:req.body.password\r\n        })\r\n        res.json({status: \"ok\"})\r\n    } catch (error) {\r\n        res.json({status: \"error\", error: \" Duplicate email\"})\r\n        \r\n    }\r\n   \r\n})\r\napp.post('/api/loign', async (req, res)=>{\r\n       const user = await User.findOne({\r\n           email:req.body.email,\r\n           password: req.body.password\r\n       })\r\n       if(user){\r\n        return res.json({status: 'ok', user: true})\r\n       }\r\n       else {\r\n        return res.json({status: 'Error', user: false})\r\n\r\n       }\r\n})\r\n\r\n\r\nmongoose.connect('mongodb://localhost:27017/MERN')\r\napp.listen(PORT, ()=>{\r\n    console.log('Server running on PORT '+ PORT);\r\n})\r\n "],"file":"server.dev.js"}